; Bounce demo override test file
; Should be used with orx v.1.0+

[Bounce]
BallLimit             = 500; Overriding ball limit
ShowCursor            = false
ShaderPhaseSpeed      = 1.0
ShaderFrequencySpeed  = 0.25
ShaderAmplitudeSpeed  = 0.5
ShaderMaxFrequency    = 6.0
ShaderMaxAmplitude    = 0.1
Title                 = Bounce Demo!

[BallSpawner]
Object = Ball # Text

[MainInput]
MOUSE_MIDDLE  = ToggleShader
KEY_LCTRL     = ToggleShader
KEY_RCTRL     = ToggleShader
MOUSE_RIGHT   = Pick
KEY_RETURN    = Pick
KEY_F1        = PreviousResolution
KEY_F2        = NextResolution
KEY_F3        = ToggleFullScreen


[Display]
Smoothing = true

[BounceCamera]
FrustumFar = 2.0

[Bump]
SlotList    = ColorFlash
KeepInCache = true

[Pick]
SlotList    = SmallWobble
KeepInCache = @Bump

[ColorFlash]
Type        = color
StartTime   = 0.0
EndTime     = 0.2
Curve       = triangle
Relative    = true
StartValue  = (0, 0, 0)
EndValue    = (255, 0, 0)

[Fade]
SlotList    = AlphaFadeIn#Scale#Wobble
KeepInCache = true

[AlphaFadeIn]
Type        = alpha
StartTime   = 0.0
EndTime     = 0.4
Curve       = linear
StartValue  = -1.0
EndValue    = 0.0

[Scale]
Type        = scale
StartTime   = 0.0
EndTime     = 0.1
Curve       = linear
StartValue  = (0.01, 0.01, 0.01)
EndValue    = (1.0, 1.0, 1.0)

[Wobble]
Type          = scale
StartTime     = 0.1
EndTime       = 0.7
Period        = 0.2
Curve         = sine
Amplification = 0.5
StartValue    = (1.0, 1.0, 0.0)
EndValue      = (2.0, 2.0, 0.0)

[SmallWobble@Wobble]
EndValue = (1.4, 1.4, 0.0)

[Ball]
LifeTime  = -1.0
Scale     = 0.3 ~ 1.0
 ;Adding random scale to the ball
Alpha     = 0.6 ~ 1.0
; Adding random alpha to the ball
Color     = (0, 0, 0) ~ (0, 255, 255)
; Adding random blue/green color to the ball
FXList    = Fade

[Text@Ball]
Scale   = 0.3 ~ 0.5
Graphic = TextGraphic

[BallText]
String = ORX#lorem ipsum#Bounce !#ball
;Font = c:/windows/fonts/times.ttf

[TextGraphic]
Text  = BallText
Pivot = center

[Sphere]
Friction  = 0.6
; Overriding friction

[Wall1]
Position  = (-300.0, -250.0, 1.0)
Rotation  = -60.0
Scale     = (0.5, 0.5, 0.0)
; Moving the wall

[Wall2]
Position  = (300.0, -150.0, 1.0)
Rotation  = 60.0
Scale     = (0.5, 0.5, 0.0)
; Moving the wall

[Wall3]
Position  = (-200.0, 50.0, 1.0)
Rotation  = -60.0
Scale     = (0.5, 0.5, 0.0)
; Moving the wall

[ParticleGraphic]
Texture = data/bounce/+.png#data/bounce/x.png
Pivot   = center

[SpawnerGraphic]
Texture = data/bounce/o.png
Pivot   = center

[FadeOut]
SlotList    = AlphaFadeOut#Flip
KeepInCache = true

[AlphaFadeOut]
Type        = alpha
StartTime   = 0.0
EndTime     = @Particle.LifeTime
Curve       = linear
StartValue  = 0.0
EndValue    = -1.0

[ColorBlink]
Type        = color
StartTime   = 0.0
EndTime     = 2.0
Curve       = sine
StartValue  = (0, 0, 0)
EndValue    = (-100, -100, -100)

[SpawnerWobble]
Type        = scale
StartTime   = 0.0
EndTime     = 2.0
Curve       = sine
StartValue  = 1.0
EndValue    = 0.6

[Flip]
Type        = scale
StartTime   = 0.0
EndTime     = @Particle.LifeTime
Period      = 4.0
Curve       = sine
StartValue  = (1.0, 1.0, 1.0)
EndValue    = (1.0, -1.0, 1.0)

[SpawnerFX]
SlotList    = ColorBlink#SpawnerWobble
Loop        = true
KeepInCache = true

[Particle]
Graphic         = ParticleGraphic
Color           = (150, 0, 150) ~ (255, 0, 255)
Position        = (-10, 0, 0.5) ~ (10, 10, 0.5)
Speed           = (-50, 30, 0) ~ (50, 100, 0)
LifeTime        = 2.0
AngularVelocity = -180 ~ 180
Scale           = 0.5 ~ 0.7
Alpha           = 0.7 ~ 1.0
FXList          = FadeOut

[ParticleSource]
Spawner   = Spawner
Position  = (0, 0, -0.2)
Graphic   = SpawnerGraphic
Color     = (150, 0, 150)
FXList    = SpawnerFX

[Spawner]
Object    = Particle
WaveSize  = 1
WaveDelay = 0.075

[BounceViewport]
ShaderList = BounceShader

[BounceShader]
Code = "
void main()
{
  // Computes position with offset
  vec2 vPos = vec2(amplitude * sin((phase + frequency * gl_TexCoord[0].y) * 6.28) + gl_TexCoord[0].x, gl_TexCoord[0].y);

  // Inside texture?
  if((vPos.x >= 0.0) && (vPos.x <= 1.0))
  {
    // Gets its pixel
    vec4 vPixel = texture2D(texture, vPos);

    // Gets its halfed-gray value
    float fGray = 0.5 * ((vPixel.r * 0.39) + (vPixel.g * 0.50) + (vPixel.b * 0.11));

    // Outputs grayed offseted pixel on top of original one
    gl_FragColor = vec4(fGray * color.r, fGray * color.g, fGray * color.b, 0.5) + 0.5 * texture2D(texture, gl_TexCoord[0].st);
  }
  else
  {
    // Outputs black pixel on top of original pixel
    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.5) + 0.5 * texture2D(texture, gl_TexCoord[0].st);
  }
}
"
UseCustomParam  = true
ParamList       = texture # frequency # phase # amplitude # color
frequency       = 4.0
phase           = 0.0
amplitude       = 0.1
color           = (1.0, 0.0, 0.0)#(0.0, 1.0, 0.0)#(0.0, 0.0, 1.0)#(1.0, 1.0, 0.0)#(1.0, 0.0, 1.0)#(0.0, 1.0, 1.0)#(1.0, 1.0, 1.0)
