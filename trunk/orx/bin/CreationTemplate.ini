; Orx settings template - No unicode support

; Sections are defined using [ ]
; Example:
; [My section]

; Everything after a ';' is considered as comment

; Key/value pairs are written like this:
; MyKey  =  MyValue
; Warning! If you want to add comments, use the ';' separator
; Example:
; MyKey  =  MyValue; Everything I wrote now is part of comments and not of the value

; If you want to use a ';' in a non-numerical value, use a block assignation delimited with '"'
; Example:
; MyKey  =  "MyValuePart1 ; MyValuePart2"
; Blocks are also useful for assigning multi-line values
; Example:
; MyKey = "This value
; spans
; on multiple lines"

; If you double the first '"', the value won't be considered as a block but as a regular one. It'll still contain a '"' at the start of the string value;
;Example:
; MyKey  =  ""MyQuotedValue"
;  The string ["MyQuotedValue"] , including the quotes, will be stored as a value

; All sections can inherit from any other one using the inheritance marker '@'
; Example:
; [Template]
; MyKey1 = MyValue1;
; MyKey2 = MyValue2;
; [Object@Template] < =  This section will contains all values defined in the section 'Template';

; All values can be locally inherited from another section using the inheritance marker '@', with the optional use of '.' if we want to specify another key
; Example:
; [Template]
; MyKey = MyValue;
; MyOtherKey = MyOtherValue;
; [Object]
; MyKey = @Template; < =  The value for 'MyKey' will be inherited from the one in the section 'Template', with the same key. This inheritance can be chained;
; MyLastKey = @Template.MyKey; < =  The value for 'MyLastKey' will be inherited from the section 'Template' using the key 'MyKey'. This inheritance can also be chained;
; NB: MyOtherKey isn't inherited in this case.

; If you want to load another file, you need to write this on an empty line:
; @path/to/MyOtherFile@
; Loading will happen instantly in the parsing, which can override previously defined values
; Also, values defined in the "included" file can be overriden afterward
; Lastly, after loading an "included" file, parsing will continue in the same section as before
; Example:
; [MySection]
; Key1 = Var1;
; @IncludeFile@
; Key2 = Var2; <=  this will be added to the 'MySection' section

; FLOAT values are expressed with a '.' as decimal separator.
; INT values can be expressed using different prefixes (not case sensitive):
; - decimal without any prefix: 16
; - hexadecimal with prefix '0x': 0x10
; - octal with prefix '0': 020
; - binary with prefix '0b': 0b10000
; VECTOR values are expressed this way:
; MyVector = (1.0, 2.0, 3.0); NB: { }  can be used in place of ( ). Components can be (x, y, z) most of the time, or (r, g, b) for color

; Wherever numerical values are used (Ints, Floats and Vectors), a random generated value can be obtained using the separator ~.
; Example:
; Value1 = 0.5 ~ 1.0;
; Value2 = (0.0, 0.0, 0.0)  ~ (1.0, 1.0, 1.0);

; You can also specify lists of values using the separator #.
; The default behavior will be to select randomly a value from a list *EXCEPT* if a list item index is provided in the code.
; For all properties defined in this template, values will be taken randomly if a list is provided for any field that doesn't explicitely accept one.
; Lists can contain random values.
; Example:
; [MySection]
; Key1  =  Var1 # Var2 # RandVar3 ~ RandVar4 # Var5;


[ObjectTemplate]
Graphic = GraphicTemplate;
AnimationSet = AnimationSetTemplate;
AnimationFrequency = [Float];
Body = BodyTemplate;
Clock = ClockTemplate; NB: If no clock is specified the main clock (core) will be used for update calculations;
LifeTime = [Float]; NB: If not defined or negative, infinite life is granted;
Color = [Vector];
Alpha = [Float];
AutoScroll = x|y|both;
Flip = x|y|both; NB: Flipping only affects the visual. Properties like physics body won't be affected;
DepthScale = true|false;
Position = [Vector]; NB: If objects has a valid parent and use its space, this value will be considered in parent's space, ie. [0-1] defines parent size on each axis;
Speed = [Vector];
UseRelativeSpeed = true|false; NB: If true, speed will be applied relatively to current object rotation & scale;
Rotation = [Float]; NB: Angle in degrees around z axis;
AngularVelocity = [Float]; NB: Velocity in degrees/second around z axis;
Scale = [Vector]|[Float]; NB: z is ignored for 2D objects. If it has a valid parent and use its space, this value will be considered in parent's space, ie. [0-1] defines parent size on each axis;
Smoothing = true|false; NB: no value will defaults to the global display settings;
BlendMode = alpha|multiply|add|none; NB: Default value is alpha;
Repeat = [Vector]; NB: z is ignored and other values must be strictly positive. This will be ignored for text objects;
FXList = FXTemplate1#FXTemplate2#...; NB: FX will be played immediately. Up to 4 FXs can be defined;
SoundList = SoundTemplate1#SoundTemplate2#...; NB: FX will be played immediately. Up to 4 sounds can be defined;
ShaderList = ShaderTemplate1#ShaderTemplate2#...; NB: Shader will be activated immediately. Up to 4 shaders can be defined;
Spawner = SpawnerTemplate;
ChildList = ObjectTemplate1#ObjectTemplate2#...; NB: Children will get deleted automatically when the current object will be deleted;
ParentCamera = CameraTemplate; NB: This will set the object as a child of the specified camera. Ex: Allows easy creation of UI objects;
UseParentSpace = true|false; NB: If set to true and has a valid parent, its position and scale will be considered in parent's space, ie. [0-1] defines parent size on each axis. Defaults to true;

[GraphicTemplate]
Texture = path/to/ImageFile.ext; NB: If provided, text data will be ignored;
TextureCorner = [Vector]; NB: Top left corner, z is ignored. This will be ignored for text data;
TextureSize = [Vector]; NB: Texture size, z is ignored. This will be ignored for text data;
Text = TextTemplate; NB: Will be ignored if a valid texture is provided;
Pivot = center(+truncate|round)|left|right|top|bottom|[Vector]; NB: Truncate and round will adjust pivot values if they are not integers; z is ignored for 2D graphics;
Repeat = [Vector]; NB: z is ignored and other values must be strictly positive. This will be ignored for text data;
Flip = x|y|both;
Color = [Vector];
Alpha = [Float];
BlendMode = alpha|multiply|add|none; NB: Default value is none;
Smoothing = true|false; NB: no value will defaults to the object settings. This will be ignored for text data;

[TextTemplate]
String = "string to display"; NB: If this string begins with the character '$', it will be used as a locale key instead of as a plain text. It will then be automatically updated upon a new language selection;
Font = path/to/Font.ext;

[BodyTemplate]
Inertia = [Float];
Mass = [Float];
LinearDamping = [Float];
AngularDamping = [Float];
FixedRotation = true|false;
HighSpeed = true|false;
Dynamic = true|false;
CustomGravity = [Vector]; NB: If none is provided, world's gravity will be applied to the body;
AllowGroundSliding = true|false;
PartList = BodyPartTemplate1#BodyPartTemplate2#...; NB: There is a maximum of 8 parts;

[BodyPartSphereTemplate]
Type = sphere;
Center = [Vector]|full;
Radius = [Float]|full;
Friction = [Float];
Restitution = [Float];
Density = [Float];
SelfFlags = flags;
CheckMask = flags;
Solid = true|false;

[BodyPartBoxTemplate]
Type = box;
TopLeft = [Vector]|full;
BottomRight = [Vector]|full;
Friction = [Float];
Restitution = [Float];
Density = [Float];
SelfFlags = flags;
CheckMask = flags;
Solid = true|false;

[BodyPartMeshTemplate]
Type = mesh;
VertexList = [Vector]#[Vector]#...; NB: There is a maximum of 8 vertices and they *HAVE* to be entered clockwise;
Friction = [Float];
Restitution = [Float];
Density = [Float];
SelfFlags = flags;
CheckMask = flags;
Solid = true|false;

[AnimationSetTemplate]
Frequency = [Float];
AnimationList = AnimationTemplate1#AnimationTemplate2#...; NB: There can be up to 256 animations in one set;
LinkList = LinkTemplate1#LinkTemplate2#...; Example: LinkList = Jump2Land#Land2Idle;

[LinkTemplate]
Source = SourceAnimationTemplate;
Destination = DestinationAnimationTemplate;
Property = immediate|cleartarget;
Priority = [Int]; NB: Value should be [0-15]. 0 being the lowest, 8 the default and 15 the highest; Example: LinkPriority1 = 10;

[AnimationTemplate]
DefaultKeyDuration = [Float];
KeyData[Int] = GraphicTemplate; Example: KeyData1 = GraphicTemplate1;
KeyDuration[Int] = [Float]; Example: KeyDuration1 = 0.1f;
EventName[Int] = [String];
EventTime[Int] = [Float]; NB: The event will be sent when the animation reaches this timestamp when played;
EventValue[Int] = [Float]; NB: This value is optional, its default value is 0.0;

[ViewportTemplate]
Texture = path/to/TextureFile.ext; NB: No texture will default to the screen one
RelativePosition = left|right|top|bottom; Example: RelativePosition = top left;
Position = [Vector]; NB: Position is in pixels and will be ignored if RelativePosition is specified
RelativeSize = [Vector]; Example: RelativeSize = (1.0, 1.0, 0.0);
Size = [Vector]; NB: Size is in pixels and will be ignored if RelativeSize is specified
BackgroundColor = [Vector];
BackgroundClear = true|false; NB: This value defaults to true if not specified
Camera = CameraTemplate;
ShaderList = ShaderTemplate1#ShaderTemplate2#...; NB: Shader will be activated immediately. Up to 4 shaders can be defined;

[CameraTemplate]
Zoom = [Float];
Position = [Vector];
Rotation = [Float];
FrustumNear = [Float];
FrustumFar = [Float];
FrustumWidth = [Float];
FrustumHeight = [Float];

[ClockTemplate]
Frequency = [Float]; NB: If not defined, 0.0 will be used meaning the clock will run as fast as possible;
ModifierType = multiply|fixed|capped; NB: If none if given, no modifier will be used. If capped is specified, the modifier value will be used as a minimum frequency;
ModifierValue = [Float];

[SoundTemplate]
Sound = path/to/SoundFile.ext; NB: If defined, Music will be ignored. Use it for short sound effects;
Music = path/to/MusicFile.ext; NB: If Sound is not defined, it'll be used to load a buffered stream of sound in memory;
Loop = true|false;
Pitch = [Float]; NB: The default pitch is 1.0, which correspond to the sound recording frequency;
Volume = [Float]; NB: Volume is in [0.0-1.0]. Defaults to 1.0;
Attenuation = [Float]; NB: Attenuation factor defaults to 1.0;
RefDistance = [Float]; NB: Distance within which the sound's maximum volume will be perceived. Defaults to 1.0;
KeepInCache = true|false; NB: If true, the sound data (ie. the sample itself) will always stay in cache. This value is ignored for a music. Defaults to false;

[FXTemplate]
SlotList = FXSlotTemplate1#FXSlotTemplate2#...; NB: There is a maximum of 8 slots;
Loop = true|false;
KeepInCache = true|false; NB: If true, the FX will always stay in cache, even if no FX of this type is currently in use. Can save time but costs memory. Defaults to false;

[FXSlotTemplate]
Type = alpha|color|scale|rotation|position|speed;
StartTime = [Float]; NB: Start time in seconds;
EndTime = [Float]; NB: End time in seconds;
Period = [Float]; NB: Cycle period is in seconds. 0.0 means the whole length will be used as a period;
Phase = [Float]; NB: Cycle phase is [0.0-1.0];
Amplification = [Float]; NB: Curve amplification coef over time. < 1.0 => attenuation, = 1.0 => constant, > 1.0 => amplification. Defaults to 1.0;
Accelereation = [Float]; NB: Curve acceleration over time. < 1.0 => deceleration, = 1.0 => constant, > 1.0 => acceleration. Defaults to 1.0;
Curve = linear|triangle|square|sine;
Pow = [Float]; NB: 1.0 is the default value and will result in a regular curve;
Absolute = true|false; NB: The curve coefficient will be used as an absolute value. Defaults to false (=relative);
UseRotation = true|false; NB: Only used for position & speed FX type, ignored otherwise. FX uses object's rotation to compute positions;
UseScale = true|false; NB: Only used for position & speed FX type, ignored otherwise. FX uses object's scale to compute positions;
StartValue = [Float]|[Vector]; NB: Vectors are only used for anisotropic scale, position, speed and color;
EndValue = [Float]|[Vector]; NB: Vectors are only used for anisotropic scale, position, speed and color;

[SpawnerTemplate]
Object = ObjectTemplate;
TotalObject = [Int]; NB: 0 or no value means unlimited total objects;
ActiveObject = [Int]; NB: 0 or no value means unlimited active objects;
Position = [Vector];
Rotation = [Float]; NB: Angle in degrees around z axis;
Scale = [Vector]|[Float]; NB: z is ignored for 2D objects;
AutoReset = true|false; NB: If true, spawner will auto reset when emptied;
UseAlpha = true|false; NB: Will only work if the spawner is linked to a parent object, from which it'll take the alpha;
UseColor = true|false; NB: Will only work if the spawner is linked to a parent object, from which it'll take the color;
UseRotation = true|false; NB: Will only work if the spawner is linked to a parent object, from which it'll take the rotation;
UseScale = true|false; NB: Will only work if the spawner is linked to a parent object, from which it'll take the scale;
WaveSize = Int; NB: Number of object to spawn in every wave. 0 or no value means no automated wave spawning;
WaveDelay = Float; NB: Ellapsed time between two spawned waves, in seconds. 0 means all the objects spawned at once;
ObjectSpeed = [Vector]; NB: If specified, this speed will be applied to spawned object;
UseRelativeSpeed = true|false; NB: If true, speed will be applied relatively to current spawner rotation & scale;
UseSelfAsParent = true|false; NB: If set to true, created object parent will the spawner. Defaults to false;

[ShaderTemplate]
Code = "Your shader code block"
ParamList = ParamFloat#ParamTexture#ParamVector#...; NB: Define all the parameters your shader code needs. Defined params then must have a default value to guess their type. If none is provided, type defaults to texture and will use shader's owner texture as value;
ParamFloat = [Float];
ParamVector = [Vector];
ParamTexture = path/to/texture|screen; NB: If an invalid path is given, or nothing is specified, the owner's texture will be used by default. 'screen' will have orx use the screen's texture.
UseCustomParam = true|false; NB: When set to true, an event will be sent to override params values at runtime. Defaults to false, ie. no override at runtime;
KeepInCache = true|false; NB: If true, the shader will always stay in cache, even if no shader of this type is currently in use. Can save time but costs memory. Defaults to false;
